// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  password       String
  balance        Float     @default(0)
  credits        Int       @default(10)
  lastLogin      DateTime?
  affiliateEmail String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relacionamentos
  transactions   Transaction[]
  prizes         Prize[]
  gameSessions   GameSession[]
  achievements   UserAchievement[]
  dailyLogins    DailyLogin[]
  games          Game[]
  deposits       Deposit[]
  withdrawals    Withdrawal[]

  @@map("users")
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "DEPOSIT", "WITHDRAWAL", "GAME_WIN", "GAME_LOSS"
  amount    Float
  status    String   @default("PENDING") // "PENDING", "COMPLETED", "FAILED"
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Prize {
  id        String    @id @default(cuid())
  userId    String
  amount    Float
  claimed   Boolean   @default(false)
  claimedAt DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@map("prizes")
}

model GameSession {
  id         String   @id @default(cuid())
  userId     String
  creditsUsed Int
  prizeWon   Float?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@map("game_sessions")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  type        String   // "DAILY", "WEEKLY", "MONTHLY", "SPECIAL", "MILESTONE"
  requirement Int
  reward      Int
  icon        String
  createdAt   DateTime @default(now())

  // Relacionamentos
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model DailyLogin {
  id        String   @id @default(cuid())
  userId    String
  loginDate DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, loginDate])
  @@map("daily_logins")
}

model Game {
  id            String   @id @default(cuid())
  userId        String
  gameType      String   @default("Raspadinha")
  betAmount     Float
  winAmount     Float   @default(0)
  affiliateEmail String?
  createdAt     DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  @@map("games")
}

model Deposit {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  @@map("deposits")
}

model Withdrawal {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  @@map("withdrawals")
}
